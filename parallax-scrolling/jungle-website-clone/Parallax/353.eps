%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (DANILO) ()%%Title: (Swallows.eps)%%CreationDate: 11/26/16 5:51 PM%%BoundingBox: -51 159 699 845%%HiResBoundingBox: -50.5015 159.3838 698.8076 844.791%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registro])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 326.5 495.627 326.5 495.627%AI3_TileBox: 46.5 116.127 605.5 899.127%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 800 800%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 4%AI8_OpenToView: -1925 2139.127 0.25 1377 912 18 1 0 297 75 0 0%AI5_OpenViewLayers: 7777%%PageOrigin:-848 -361%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Plug-in Adobe fusioni) (Fusioni dinamiche.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Ricalco) (Modulo ricalco.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Plug-in Pennello diffusione di Adobe) (Strumento pennello di#C3DDF.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Plug-in Pennello diffusione di Adobe) (Strumento pennello di#C3DDF.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Riflesso.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Simboli Adobe) (Simboli.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Plug-in Adobe pennello pattern) (Strumento pennello ar#C3D73.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Plug-in Adobe pennello pattern) (Strumento pennello ar#C3D73.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Plug-in Adobe Pennello artistico) (Strumento pennello ar#C3D73.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Plug-in Adobe Pennello artistico) (Strumento pennello ar#C3D73.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Plug-in pennello calligrafico di Adobe) (Strumento pennello ca#C3DA9.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Forma composta Adobe) (Modulo elaborazione t#C14F4.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Plug-in Involucro di Adobe) (Involucro e Altera.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Plug-in Adobe Pittura dinamica) (Pittura dinamica.aip)%AI5_End_NonPrinting--4 Bn%AI5_BeginGradient: (Unnamed gradient 49)(Unnamed gradient 49) 1 2 Bd[<C9CACACACBCCCCCCCDCCCDCECECECFCFCFCFD0D0D0D0D1D0D0D1D1D0D1D2D2D1D2D2D1D2D3D4D3D4D4D4D4D5D5D3D4><B3B4B5B4B5B6B7B5B6B7B8B9B8B9BABBBCBABBBCBDBBBCBDBDBEBCBDBEBFBDBEBFC0C1BEC0C1C3C4C1C2C3C4C1C2C3><7272727474757577777878787A7A7B7B7B7D7E7E7E80808082838585858688888889898B8C8C8C8D8F8F9090939494><696B6D6F71737577797B7D7F828486888A8D8F919396989A9EA1A3A5A7A9ABADB0B2B4B6B8BBBDBFC2C4C6C7C9CBCC><35343433323131302F2F2E2D2C2C2B2A2A292827272625252423222221201F1F1E1D1D1C1B1A1A1918181716151514><3A393838373635353433323131302F2E2D2D2C2B2A2A2928272626252423232221201F1F1E1D1C1B1B1A1918181716><4C4B4A494847464544434241403F3E3D3C3B3A3938373635333231302F2E2D2C2B2A292827262524232221201F1E1D>4 %_Br[0.788235 0.701961 0.447059 0.411765 0.207843 0.227451 0.298039 2 50 0 %_BS%_0.788235 0.701961 0.447059 0.411765 0.207843 0.227451 0.298039 2 50 0 Bs0.831372 0.764706 0.580392 0.8 0.078431 0.086275 0.113725 2 50 100 %_BS%_0.831372 0.764706 0.580392 0.8 0.078431 0.086275 0.113725 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 1 2 Bd[<C1C2C1C2C2C3C3C3C4C5C5C6C6C6C7C7C8C8C9C9C9C9C9CACACACBCCCCCCCCCDCDCDCDCDCDCECECFCECFCFCFCFD0CFD0D0D0D1D1D0D0D1D1D1D2D1D2D2D2D3D3D3D4D3D4D5D4D5D4D5D5D4D5D5D5D6D5D5D6D5D6D5D5D6D5D5D4D5D6D5D6D5D6D7D5D6D6D5D5D3D4><ACADACADAFAEAFAEB0B1B0B1B3B2B3B5B4B5B6B5B7B6B7B8B7B9BAB9BABBBABBBCBBBCBBBCBDBCBDBEBDBEC0BEBFBEC0C1C0C1C2BFC1C2C0C2C3C1C2C1C2C3C2C3C4C3C4C5C3C5C3C4C5C3C5C6C4C5C7C4C6C7C5C6C4C4C6C3C5C6C4C6C7C5C6C7C5C6C3C4C4C2C3><37383A3B3B3D3D3F40404243434545464748484A4B4C4D4D4F4F5051525254545456565858585A5A5B5C5D5D5E5F6161616363646767686A6A6A6C6C6E6E6E70707072727274747676777979797B7B7B7D7D7D7F808182828485858787878A8A8A8D8D9090909494><0F1011121314151617181A1B1C1D1F202122242527282A2B2D2F303234353738393B3C3E4041434546494A4C4E50525456585A5C61636567696B6D6F717375787A7C7E80828587898B8D8F929496989A9D9FA1A3A6A8AAACAEB0B3B5B7B9BBBDC0C2C4C6C7C9CBCC><5352525151504F4F4E4D4D4C4C4B4A4A494948474746464544444342424141403F3F3E3E3D3C3C3B3B3A39393837373636353434333332313130302F2E2E2D2C2C2B2B2A29292828272626252524232322212120201F1E1E1D1D1C1B1B1A1A191818171616151514><58575756555554545352525150504F4E4E4D4C4C4B4B4A494948474746454544434342424140403F3E3E3D3C3C3B3B3A393938373736353534333332323130302F2E2E2D2C2C2B2B2A292928272726252524232322222120201F1E1E1D1C1C1B1A1A191918171716><8584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655545352504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D>4 %_Br[0.756863 0.67451 0.215686 0.058824 0.32549 0.345098 0.521569 2 50 0 %_BS%_0.756863 0.67451 0.215686 0.058824 0.32549 0.345098 0.521569 2 50 0 Bs0.831372 0.764706 0.580392 0.8 0.078431 0.086275 0.113725 2 50 100 %_BS%_0.831372 0.764706 0.580392 0.8 0.078431 0.086275 0.113725 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 8)(Unnamed gradient 8) 1 2 Bd[<C1C2C1C2C2C3C3C3C4C5C5C6C6C6C7C7C8C8C9C9C9C9C9CACACACBCCCCCCCCCDCDCDCDCDCDCECECFCECFCFCFCFD0CFD0D0D0D1D1D0D0D1D1D1D2D1D2D2D2D3D3D3D4D3D4D5D4D5D4D5D5D4D5D5D5D6D5D5D6D5D6D5D5D6D5D5D4D5D6D5D6D5D6D7D5D6D6D5D5D3D4><ACADACADAFAEAFAEB0B1B0B1B3B2B3B5B4B5B6B5B7B6B7B8B7B9BAB9BABBBABBBCBBBCBBBCBDBCBDBEBDBEC0BEBFBEC0C1C0C1C2BFC1C2C0C2C3C1C2C1C2C3C2C3C4C3C4C5C3C5C3C4C5C3C5C6C4C5C7C4C6C7C5C6C4C4C6C3C5C6C4C6C7C5C6C7C5C6C3C4C4C2C3><37383A3B3B3D3D3F40404243434545464748484A4B4C4D4D4F4F5051525254545456565858585A5A5B5C5D5D5E5F6161616363646767686A6A6A6C6C6E6E6E70707072727274747676777979797B7B7B7D7D7D7F808182828485858787878A8A8A8D8D9090909494><0F1011121314151617181A1B1C1D1F202122242527282A2B2D2F303234353738393B3C3E4041434546494A4C4E50525456585A5C61636567696B6D6F717375787A7C7E80828587898B8D8F929496989A9D9FA1A3A6A8AAACAEB0B3B5B7B9BBBDC0C2C4C6C7C9CBCC><5352525151504F4F4E4D4D4C4C4B4A4A494948474746464544444342424141403F3F3E3E3D3C3C3B3B3A39393837373636353434333332313130302F2E2E2D2C2C2B2B2A29292828272626252524232322212120201F1E1E1D1D1C1B1B1A1A191818171616151514><58575756555554545352525150504F4E4E4D4C4C4B4B4A494948474746454544434342424140403F3E3E3D3C3C3B3B3A393938373736353534333332323130302F2E2E2D2C2C2B2B2A292928272726252524232322222120201F1E1E1D1C1C1B1A1A191918171716><8584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655545352504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D>4 %_Br[0.756863 0.67451 0.215686 0.058824 0.32549 0.345098 0.521569 2 50 0 %_BS%_0.756863 0.67451 0.215686 0.058824 0.32549 0.345098 0.521569 2 50 0 Bs0.831372 0.764706 0.580392 0.8 0.078431 0.086275 0.113725 2 50 100 %_BS%_0.831372 0.764706 0.580392 0.8 0.078431 0.086275 0.113725 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 83)(Unnamed gradient 83) 0 2 Bd[<2E2F303132323334353637373838393A3A3B3B3C3D3D3D3E3F4040404041424242424344444444454546464646474646><E7E8E9EAEAEBECECEDEEEFEFF0F1F2F3F3F4F5F6F6F7F8F8F9FAFAFBFBFCFDFDFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFF><7F8182818384868787888A8B8D8E8D8F909294939496979998999B9D9F9EA0A1A3A5A4A6A8AAACADACAEB0B2B4B3B4B6><0607070809090A0B0C0D0D0F101112131415161718191B1C1E20212224252628292B2C2E2F3133343637393A3C3D3F41><C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897><3231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403><5655545453525150504F4E4D4C4B4B4A4948474746454443434241403F3F3E3D3C3B3B3A393837363635343332323130>4 %_Br[0.27451 1 0.713725 0.254902 0.592157 0.011765 0.188235 2 50 100 %_BS%_0.27451 1 0.713725 0.254902 0.592157 0.011765 0.188235 2 50 100 Bs0.180392 0.905882 0.498039 0.023529 0.780392 0.196078 0.337255 2 50 0 %_BS%_0.180392 0.905882 0.498039 0.023529 0.780392 0.196078 0.337255 2 50 0 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ Pennello calligrafico 2/ Adobe) -( Calligraphic Brush Tool/ Pennello calligrafico 1/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Pennello calligrafico 1)(1 0 2 100 100 0 0 2 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Pennello calligrafico 2)(1 0 4 100 100 0 0 2 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registro]) 0 Xs([Registro])Pc0 0 0 0 1 1 1 Xa(Bianco)Pc0.545098 0.494118 0.568627 0.192157 0.462745 0.427451 0.368627 Xa(R=118 G=109 B=94)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 9 255 102 0 0 50 Lb(Swallow_4) Ln0 Au0 O0.858823 0.85098 0.788235 1 0 0 0 Xa0 J 0 j 1 w 4 M []0 d0 XR191.5259 204.1748 m178.8252 182.1094 155.3052 183.2725 v131.7847 184.4365 87.7368 208.7012 79.4893 212.1074 c71.2412 215.5137 47.0601 233.7793 36.0098 236.4141 c24.9595 239.0469 -1.90088 254.833 y25.1592 244.2051 34.4224 242.5869 v43.6851 240.9678 57.9053 233.9902 y52.3374 239.876 l59.3252 238.0928 70.4575 234.3223 v81.5898 230.5498 81.5898 230.5498 y78.4189 234.8955 l86.9902 234.9404 94.5464 233.2002 v102.103 231.458 108.6045 228.4961 y103.0356 234.3828 l108.7222 234.793 117.8618 234.8799 v127.0015 234.9648 147.3501 238.1465 149.1377 237.1328 c150.9258 236.1172 140.5576 253.0898 137.3867 257.4365 c134.2153 261.7793 106.2495 292.9199 97.0635 301.4023 c87.8789 309.8867 41.6191 364.8584 32.4595 396.7822 c53.6475 356.5801 67.6689 344.4443 v81.6909 332.3057 96.5264 316.7969 102.582 312.0898 c108.6372 307.3809 119.001 298.4111 123.269 294.7168 c127.5356 291.0225 127.6992 288.749 131.1118 288.9941 c134.5234 289.2402 130.2925 300.3672 130.6563 303.252 c131.0195 306.1377 128.0752 339.0771 125.6729 348.6221 c123.27 358.167 114.4341 393.542 112.3184 399.1055 c110.2031 404.6689 101.8633 425.2178 y114.3057 403.249 118.4141 393.8291 v122.5225 384.4063 135.2217 343.0225 136.4053 334.5322 c137.5879 326.0439 140.9736 302.8516 141.9521 297.2061 c142.9307 291.5596 145.4155 280.8779 148.5454 277.1025 c151.6753 273.3271 154.8867 268.4141 159.1133 265.2881 c163.3408 262.1631 174.8003 253.8438 y182.3154 252.6689 l178.3618 275.8203 178.3154 284.3916 v181.9326 281.7959 l182.415 290.9746 182.6143 296.1348 v182.8145 301.292 183.624 305.9248 y187.6504 297.6387 l186.2627 308.9717 184.4692 317.9893 v182.6768 327.0049 180.4331 342.2773 y184.8647 336.3086 l177.3394 353.4873 175.3877 356.7764 v173.436 360.0645 158.1851 389.2627 153.8359 394.0928 c169.1997 379.1963 180.2188 361.125 v191.2383 343.0566 197.1802 324.0479 203.0356 314.1826 c208.8911 304.3145 221.0112 278.8945 222.2358 269.8359 c223.46 260.7783 225.9854 249.5283 224.4434 247.1299 c222.9014 244.7314 214.2119 238.3906 y217.8286 235.793 l229.4478 233.2002 229.7344 229.2207 v230.021 225.2402 231.9775 213.9473 y237.1421 205.7461 l228.3662 208.543 226.1323 207.8105 v223.8989 207.0781 214.5596 201.832 208.7495 203.1289 c202.9399 204.4238 191.5259 204.1748 yf/BBAccumRotation (0.071918) XT130.6563 303.252 m130.377 301.0371 132.8037 293.9639 132.4014 290.6875 C133.8564 291.8711 134.9985 293.3242 135.0894 294.6152 c135.2769 297.2959 132.8496 325.7021 132.9004 330.2793 c132.9521 334.8574 125.8975 358.7373 Y117.9888 388.1309 114.0815 393.3711 V117.4604 381.4258 123.7114 356.415 125.6729 348.6221 c128.0752 339.0771 131.0195 306.1377 130.6563 303.252 cBb0 0 0 0 Bh1 (Unnamed gradient 49) -171.0361 52.0342 -160.4965 20.8511 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg-17.7329 -7.7562 -7.75621 17.7329 126.3315 337.0273 Bmf0 BB/BBAccumRotation (0.071918) XT123.269 294.7168 m119.001 298.4111 108.6372 307.3809 102.582 312.0898 c96.5264 316.7969 81.6909 332.3057 67.6689 344.4443 c65.1709 346.6055 62.4453 349.667 59.6533 353.2227 C66.022 344.4902 73.377 335.0146 78.8218 329.8125 c90.6899 318.4727 102.9092 307.541 107.4619 302.5332 c112.0151 297.5244 124.8848 288.1631 127.5376 288.3545 c128.2061 288.4023 129.0039 288.6543 129.8286 289.0479 C127.5742 289.4355 126.9243 291.5518 123.269 294.7168 cBb0 0 0 0 Bh1 (Unnamed gradient 49) -202.5664 36.8818 56.6333 20.1017 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg9.11625 16.2808 16.2808 -9.11626 98.1499 320.8965 Bmf0 BB/BBAccumRotation (0.071918) XT50.1846 366.6182 m48.8428 368.6777 47.5283 370.752 46.2593 372.7998 C46.0005 372.7969 L47.6113 370.3652 50.1846 366.6182 vBb0 0 0 0 Bh1 (Unnamed gradient 49) -146.7993 65.085 3.86624 55.6959 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg51.1981 7.18339 7.18342 -51.1981 147.9004 350.7275 Bmf0 BB/BBAccumRotation (0.071918) XT36.6318 238.3633 m40.8564 237.9053 50.4468 231.7373 52.8311 230.3828 c55.2153 229.0313 83.9819 215.8613 90.2939 212.8857 c96.6055 209.9102 126.4561 197.5811 135.8008 194.8242 c145.1445 192.0674 158.8228 187.3369 166.0503 192.8105 c173.2778 198.2861 182.834 203.167 181.126 205.7109 c179.4189 208.2549 168.5039 211.6611 165.252 214.4746 c162.1104 217.1943 149.3364 235.2148 142.5874 237.0469 C135.3618 236.4121 124.0474 234.9375 117.8618 234.8799 c108.7222 234.793 103.0356 234.3828 Y108.6045 228.4961 L102.103 231.458 94.5464 233.2002 v86.9902 234.9404 78.4189 234.8955 Y81.5898 230.5498 L81.5898 230.5498 70.4575 234.3223 v59.3252 238.0928 52.3374 239.876 Y57.9053 233.9902 L43.6851 240.9678 34.4224 242.5869 v29.9854 243.3613 21.4644 246.2061 13.79 248.9561 C13.769 248.9102 L32.4072 238.8223 36.6318 238.3633 vBb0 0 0 0 Bh1 (Unnamed gradient 49) -198.8813 -39.2793 93.6327 51.6979 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg-6.47401 47.5498 47.5498 6.47399 106.6416 250.6289 Bmf0 BB/BBAccumRotation (0.071918) XT200.165 248.2402 m204.8511 246.6729 211.9756 242.9941 213.8154 243.8887 c215.6567 244.7822 217.4917 256.3477 217.3008 259.001 c217.1094 261.6543 211.5659 290.9795 209.8315 293.9033 c208.1211 296.7852 174.9941 375.6104 160.4927 383.7451 C166.5215 373.3457 174.0542 359.0215 175.3877 356.7764 c177.3394 353.4873 184.8647 336.3086 Y180.4331 342.2773 L182.6768 327.0049 184.4692 317.9893 v186.2627 308.9717 187.6504 297.6387 Y183.624 305.9248 L182.8145 301.292 182.6143 296.1348 v182.415 290.9746 181.9326 281.7959 Y178.3154 284.3916 L178.3545 277.1055 181.2188 259.2861 182.0752 254.1084 C182.6675 253.0771 L195.4795 249.8066 200.165 248.2402 vBb0 0 0 0 Bh1 (Unnamed gradient 49) -121.8984 7.40137 149.5892 43.6814 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg-36.3531 17.9591 17.9591 36.3531 174.8027 298.9824 Bmf0 BB/BBAccumRotation (0.071918) XT194.1807 246.6641 m186.4624 248.0137 177.5244 250.4189 173.5967 252.042 c169.6685 253.6631 160.6729 262.1611 158.6953 263.1621 c156.7183 264.1631 151.8716 262.6719 151.2222 261.1006 c150.5732 259.5293 153.125 250.5664 154.4258 248.374 c155.7271 246.1816 163.127 233.376 167.5161 230.6436 c171.9053 227.9111 185.5293 223.9404 188.2104 223.751 c190.8911 223.5625 194.437 227.248 195.7891 229.6318 c197.1416 232.0156 204.2319 239.3857 206.8857 239.5762 C201.8994 245.3154 194.1807 246.6641 vBb0 0 0 0 Bh1 (Unnamed gradient 49) -116.5771 -29.4502 71.8009 31.4664 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg7.10504 28.3313 28.3313 -7.10505 182.1875 265.2178 Bmf0 BB/BBAccumRotation (0.071918) XT227.7168 230.7891 m225.332 232.1416 217.5586 234.249 215.2568 234.4648 C208.0273 234.3252 205.4819 232.6162 v202.937 230.9082 198.5791 227.9268 199.853 226.1143 c201.1274 224.3008 210.9053 220.8135 212.0151 221.2734 c213.126 221.7354 214.5054 223.7393 215.752 222.3057 c216.999 220.8721 219.1128 217.9746 220.7114 216.9473 c222.3091 215.9189 225.5068 213.8623 Y229.6489 214.541 L230.1001 229.4365 227.7168 230.7891 vBb0 0 0 0 Bh1 (Unnamed gradient 49) -69.8965 -56.4756 64.698 24.9118 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg8.35533 21.5621 21.5621 -8.35534 227.2095 243.3105 Bmf0 BB/BBAccumRotation (0.071918) XT*u1 D0 g114.3027 213.0801 m114.9702 212.8135 115.5625 212.5986 116.0474 212.4541 C115.4238 212.6748 114.3027 213.0801 Vf/BBAccumRotation (0.071918) XT0 g114.3027 213.0801 m105.3262 216.667 81.3057 230.5303 Y81.0566 230.7324 L80.127 231.0469 77.5645 231.915 70.4575 234.3223 c59.3252 238.0928 52.3374 239.876 Y53.019 239.1553 L66.2632 230.6045 105.5518 216.2344 114.3027 213.0801 cf/BBAccumRotation (0.071918) XT0 g78.8892 234.8936 m79.3135 234.3867 L116.7573 214.5068 142.4741 206.6426 V107.9624 222.4355 94.2402 233.2646 V87.7988 234.7051 80.7305 234.875 78.8892 234.8936 Cf/BBAccumRotation (0.071918) XT0 g111.8018 234.7676 m107.6348 234.6514 104.7651 234.4922 103.6084 234.4199 C103.7061 234.3486 125.1021 218.5117 151.7139 209.3086 C120.9673 224.4609 111.8018 234.7676 Vf/BBAccumRotation (0.071918) XT0 g133.8394 236.1631 m130.5986 235.8213 127.2563 235.4746 124.2305 235.2285 C127.8525 232.1025 140.2734 221.6113 148.561 217.3691 C137.062 231.2412 133.8394 236.1631 Vf/BBAccumRotation (0.071918) XT0 g142.2773 237.0176 m141.3076 236.9307 140.2686 236.8291 139.1821 236.7207 C146.5845 228.9453 L142.2773 237.0176 Lf/BBAccumRotation (0.071918) XT35.8921 242.293 m35.3916 242.4014 34.8994 242.5039 34.4224 242.5869 c29.9854 243.3613 21.4644 246.2061 13.79 248.9561 C13.769 248.9102 L32.4072 238.8223 36.6318 238.3633 v40.8564 237.9053 50.4468 231.7373 52.8311 230.3828 c55.2153 229.0313 83.9819 215.8613 90.2939 212.8857 c96.1572 210.1221 122.3232 199.291 133.5034 195.5547 C112.6973 204.0303 57.8232 230.417 51.6094 234.1074 c47.8022 236.3701 41.106 239.7383 35.8921 242.293 CBb0 0 0 0 Bh1 (Unnamed gradient 8) -198.8823 -39.2793 93.6327 51.6979 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg-6.47401 47.5497 47.5497 6.47399 106.6411 250.6279 Bmf0 BB/BBAccumRotation (0.071918) XT*U/BBAccumRotation (0.071918) XT*u0 g176.0313 355.5898 m181.3076 348.4727 189.6987 335.5381 197.4287 316.6357 c206.5234 294.3965 211.4189 284.1338 214.2905 275.626 C212.6274 283.8887 210.7251 292.3975 209.8315 293.9033 c208.1211 296.7852 174.9941 375.6104 160.4927 383.7451 C166.5215 373.3457 174.0542 359.0215 175.3877 356.7764 c175.561 356.4844 175.7798 356.0781 176.0313 355.5898 Cf/BBAccumRotation (0.071918) XT0 g183.9048 320.9512 m194.748 309.8184 205.5322 283.4951 Y197.083 308.4951 184.1792 333.5801 180.7661 340.0498 C181.3643 336.1006 182.6719 327.6387 183.9048 320.9512 Cf/BBAccumRotation (0.071918) XT0 g187.5527 298.418 m187.6167 297.917 187.6504 297.6387 Y183.624 305.9248 L182.8145 301.292 182.6143 296.1348 v182.5947 295.6172 182.5708 295.0527 182.5459 294.4678 C190.9331 288.6045 203.2261 267.8936 Y198.3218 284.4033 187.6094 298.208 Y187.5527 298.418 Lf/BBAccumRotation (0.071918) XT0 g181.3643 281.7549 m181.2017 282.3184 L178.3154 284.3916 L178.3286 281.9336 178.6636 278.2793 179.1338 274.3154 C185.8862 273.4268 199.8989 262.5107 Y192.8032 273.7188 181.3643 281.7549 Yf/BBAccumRotation (0.071918) XT180.4365 264.6104 m180.7344 262.5732 181.0288 260.6455 181.2944 258.958 C184.0962 259.207 190.416 259.2559 Y188.3228 260.5332 180.6021 264.5508 Y180.4365 264.6104 LBb0 0 0 0 Bh1 (Unnamed gradient 8) -121.8989 7.40137 149.5892 43.6816 0.925849 -0.0667 0.0667 0.925849 291.9258 868.4941 Bg-36.3533 17.9592 17.9592 36.3533 174.8022 298.9824 Bmf0 BB/BBAccumRotation (0.071918) XT*U/BBAccumRotation (0.071918) XT0 D208.7495 203.1289 m213.4434 202.082 220.4355 205.3018 224.1294 206.9648 C222.188 206.9932 219.8296 206.9736 217.6304 206.8154 c212.7017 206.46 206.6875 210.6006 205.3037 213.9316 c203.9209 217.2607 190.9497 217.4707 189.8667 216.6299 c188.8667 215.8545 188.3408 208.6172 191.5093 204.1455 C191.5146 204.1533 191.5259 204.1748 Y202.9399 204.4238 208.7495 203.1289 vBb1 (Unnamed gradient 83) 202.7783 174.1133 84.9574 12.9712 0.997415 -0.071855 0.071856 0.997415 -587.1404 573.2696 Bg0.208722 12.9695 39.8049 -0.640633 186.248 202.8857 Xm129.8747 8070.0986 39.8049 -0.640633 56.3735 -7867.2129 Bc0.208722 12.9695 39.8049 -0.640633 186.248 202.8857 Bm129.8747 8070.0986 39.8049 -0.640633 186.4565 215.8555 Bcf0 BB/BBAccumRotation (0.071918) XT0.396078 0.435294 0.094118 0 0.658824 0.588235 0.721569 Xa148.1958 250.2109 m133.6826 269.1719 126.9355 275.5459 v121.8271 280.3711 107.3589 292.3818 100.6309 297.9326 C111.9824 286.5254 134.5562 261.3135 137.3867 257.4365 c140.0288 253.8145 147.6621 241.4355 149.1016 237.9912 C151.9204 237.1318 156.8179 233.6846 Y148.1958 250.2109 Lf/BBAccumRotation (0.071918) XTU/BBAccumRotation (0.071918) XTLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 7 128 128 128 0 50 Lb(Swallow_3) Ln0 Au0 O0.858823 0.85098 0.788235 1 0 0 0 Xa0 J 0 j 1 w 4 M []0 d0 XR57.106 604.1655 m61.4805 596.7861 l66.1094 592.3887 69.5024 591.0981 v72.896 589.8091 78.6348 580.811 y80.3481 589.1724 81.5117 591.0752 v82.6753 592.979 91.5444 597.2256 91.6836 604.7212 c100.9233 607.4375 106.8433 606.4307 v112.7627 605.4263 141.4023 618.4971 156.1006 638.2627 c170.7988 658.0283 197.9282 682.7383 202.4702 718.3848 c195.7344 703.9443 192.3711 699.7285 v189.0093 695.5107 179.3022 687.3311 178.0547 684.4336 c176.8071 681.5381 176.9458 689.0332 y173.3296 681.8354 166.8584 676.3809 v160.3877 670.9277 148.9365 659.8931 y152.0576 667.1338 l145.0039 660.729 136.7588 657.9287 v128.5127 655.1294 112.1597 657.0244 y105.4453 654.5928 103.1196 650.7891 v102.4033 665.8638 103.6211 674.2671 v104.8384 682.6704 110.5386 696.6992 116.1001 703.2305 c121.6616 709.7627 191.2451 780.3994 243.3862 804.9775 c210.0195 789.3076 190.9053 776.4233 v171.79 763.54 158.9341 753.626 154.8315 752.4756 c150.7295 751.3247 111.3555 712.1436 103.2056 716.3408 c95.0566 720.5391 103.7847 758.3296 124.4556 783.5918 c133.6333 797.3232 137.2505 804.52 v140.8667 811.7202 169.7109 844.791 y143.9448 818.4629 125.6421 797.5024 v107.3394 776.5439 92.9146 748.2466 89.8799 741.9995 c86.8447 735.7529 85.6357 709.832 82.8428 700.5615 c80.0498 691.292 68.999 673.2163 64.062 668.1323 c59.124 663.0483 52.5156 650.0996 52.6733 646.0825 c44.4077 654.7949 42.5054 655.959 v40.6025 657.1211 19.9897 661.8809 15.1479 663.7964 c10.3071 665.7109 1.87256 672.4355 y3.02344 668.3335 l-2.55811 673.3145 -10.3799 675.4814 v-18.2012 677.6509 -47.5229 697.6675 -50.4458 727.9434 c-51.728 707.0352 -41.9961 686.1855 v-32.2642 665.3364 -14.4243 639.7935 4.14746 628.7012 c22.7192 617.6094 29.6328 616.5195 38.8184 612.7329 c48.0044 608.9468 57.106 604.1655 yf17.6157 628.1792 m29.5308 622.6582 53.2666 610.5005 55.1616 610.7144 c57.0566 610.9277 59.2461 618.9985 59.1597 622.3838 c59.0732 625.7695 51.5049 647.0576 Y51.4707 647.3389 L49.1104 649.79 43.958 655.0703 42.5054 655.959 c40.6025 657.1211 19.9897 661.8809 15.1479 663.7964 c10.3071 665.7109 1.87256 672.4355 Y3.02344 668.3335 L-2.55811 673.3145 -10.3799 675.4814 v-16.5508 677.1929 -36.0942 690.0186 -45.5083 710.2212 C-40.9956 672.7822 5.73096 633.6851 17.6157 628.1792 cBb0 0 0 0 Bh1 (Unnamed gradient 49) -246.4395 546.6187 75.2038 44.8913 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg18.4028 51.4791 51.4791 -18.4028 15.9824 685.2485 Bmf0 BB107.8384 612.2266 m110.542 613.1216 135.6523 621.4897 146.9536 635.1646 c158.2539 648.8394 172.3218 664.1543 178.1743 671.1611 c183.7246 677.8081 197.1982 698.2886 196.9185 707.2485 C195.2813 704.1802 193.6001 701.2705 192.3711 699.7285 c189.0093 695.5107 179.3022 687.3311 178.0547 684.4336 c176.8071 681.5381 176.9458 689.0332 Y173.3296 681.8354 166.8584 676.3809 v160.3877 670.9277 148.9365 659.8931 Y152.0576 667.1338 L145.0039 660.729 136.7588 657.9287 v128.5127 655.1294 112.1597 657.0244 Y110.6289 656.4668 108.7788 655.4756 V106.4292 651.6387 101.8926 644.0737 100.5015 640.627 c98.5981 635.9097 91.4287 622.2588 89.7153 619.7773 c88.3584 617.813 91.1909 609.8525 92.4746 604.938 C94.3208 605.4263 99.1265 606.5791 103.479 606.6475 C104.1338 608.1855 105.7681 611.5415 107.8384 612.2266 cBb0 0 0 0 Bh1 (Unnamed gradient 49) -143.2573 553.1704 109.2905 34.7052 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg-10.522 40.934 40.934 10.522 141.8643 682.521 Bmf0 BB102.6572 679.1035 m103.4751 684.2886 101.1606 692.3682 101.0742 695.7544 c100.9878 699.1396 92.0127 699.5298 88.373 696.4629 c84.7339 693.3936 73.4702 666.9551 66.5229 655.9116 c59.5762 644.8687 66.3345 622.897 Y71.3062 623.9746 79.1313 623.3076 v86.9565 622.6396 85.3477 625.7803 89.0825 629.9658 c92.4429 633.731 101.3232 648.8623 103.0747 651.8652 C102.9536 655.0762 102.6689 664.812 103.3413 671.8823 C102.7378 674.2314 102.3091 676.9014 102.6572 679.1035 cBb0 0 0 0 Bh1 (Unnamed gradient 49) -166.5967 535.5625 3.86624 30.3685 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg36.9777 -0.650963 -0.650962 -36.9777 111.7217 663.5708 Bmf0 BB74.9917 618.7808 m71.2339 618.7261 66.0083 614.6685 Y63.0825 611.1641 65.1504 604.6079 66.291 600.3809 c67.4316 596.1548 73.481 592.2607 Y76.2485 593.9019 79.9111 592.8394 Y84.2959 595.8423 86.3496 597.9199 v88.4038 599.9956 89.1255 604.0635 88.6982 607.854 c88.2705 611.6431 84.6167 617.2095 Y78.75 618.8369 74.9917 618.7808 vBb0 0 0 0 Bh1 (Unnamed gradient 49) -177.2422 512.6353 60.9454 25.2944 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg17.1939 25.5589 25.5589 -17.1939 96.4316 636.8521 Bmf0 BB93.8965 726.0181 m93.8247 720.7695 103.8765 715.4077 Y104.0962 715.6606 104.4419 716.0615 V103.9829 716.0884 103.5552 716.1606 103.2056 716.3408 c95.0566 720.5391 103.7847 758.3296 124.4556 783.5918 C133.6333 797.3232 137.2505 804.52 v138.0723 806.1563 140.2036 809.1353 142.9966 812.752 C134.791 803.7417 116.3477 782.9419 107.6758 768.7583 c96.335 750.207 93.9688 731.2671 93.8965 726.0181 cBb0 0 0 0 Bh1 (Unnamed gradient 49) -165.3682 614.998 -20.855 18.4032 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg20.1897 -9.72957 -9.72957 -20.1897 121.4326 759.8315 Bmf0 BB131.6279 723.9272 m142.8242 731.9795 163.1807 755.0156 175.4951 762.9741 c184.4746 768.7764 199.3198 780.2593 206.7056 786.0557 C201.0527 782.8579 195.5562 779.5576 190.9053 776.4233 c171.79 763.54 158.9341 753.626 154.8315 752.4756 c151.6265 751.5752 126.895 727.4668 112.3418 718.9624 C111.6152 718.1255 L120.4316 715.873 131.6279 723.9272 vBb0 0 0 0 Bh1 (Unnamed gradient 49) -140.8003 618.2734 116.565 19.2273 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg-8.65405 21.7575 21.7575 8.65405 151.583 761.2632 Bmf0 BB*u1 D0 g-45.5083 710.2212 m-43.6294 694.6406 -34.4341 678.7803 -23.4873 665.165 C-28.7075 673.4658 -37.5513 688.7744 -40.3193 701.1733 C-42.2354 704 -44.0098 707.0054 -45.5083 710.2212 Cf0 g-21.9351 682.061 m-16.9502 667.3994 -5.6665 650.0566 Y-10.3608 658.0068 -12.8052 667.8955 -14.0454 677.0391 C-16.2622 678.1812 -18.9697 679.8555 -21.9351 682.061 Cf0 g-3.7583 672.8379 m-3.31689 667.0566 -1.24805 652.5674 8.44434 639.4707 C1.50146 656.0596 2.66943 668.6328 V1.83301 669.3242 -0.476563 671.1274 -3.7583 672.8379 Cf0 g19.1118 662.519 m17.5181 662.981 16.2031 663.3945 15.3247 663.73 C14.812 659.2324 13.8384 644.6909 20.5103 631.3096 C16.4658 651.7578 19.1118 662.519 Vf0 g36.1045 657.9561 m34.3828 658.4238 32.4473 658.9341 30.4546 659.457 C30.5688 657.1978 31.4932 641.4883 35.4243 634.542 C33.7354 651.9741 36.1045 657.9561 Vf48.3813 650.5044 m47.0938 651.8042 45.7305 653.1504 44.6016 654.1987 C44.5928 654.0288 L49.0923 636.3789 L48.8325 646.5366 48.3813 650.5044 VBb0 0 0 0 Bh1 (Unnamed gradient 6) -246.4395 546.6187 75.2038 44.8914 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg18.4028 51.4792 51.4792 -18.4028 15.9824 685.2485 Bmf0 BB*U*u0 g108.6909 635.4253 m115.9746 649.6733 118.873 656.5161 V117.5601 656.5781 116.3706 656.6553 115.3687 656.73 C108.6909 635.4253 Lf0 g128.6333 656.5493 m127.1479 652.8564 120.7744 637.1953 116.9116 630.5952 C129.146 645.6587 133.8286 657.1802 V132.2095 656.8696 130.4429 656.668 128.6333 656.5493 Cf0 g148.9365 659.8931 m152.0576 667.1338 L148.6392 664.0347 143.7856 661.2051 V140.9312 653.8291 133.1655 634.9512 125.6323 627.2236 C139.1802 637.6787 149.3862 660.3257 V149.1045 660.0547 148.9365 659.8931 Yf0 g166.8584 676.3809 m165.395 675.1475 163.6724 673.623 161.8901 672.0117 C158.1904 664.2285 150.335 648.2524 144.354 639.8901 C160.9272 661.3774 167.043 676.5449 V166.981 676.4907 166.9219 676.4336 166.8584 676.3809 cf196.9185 707.2485 m195.2813 704.1802 193.6001 701.2705 192.3711 699.7285 c191.6064 698.7676 190.5044 697.5981 189.2559 696.3374 C186.979 683.0659 170.3423 665.5313 165.6055 660.2227 c162.5596 656.8086 154.96 646.0654 149.5132 638.2334 C160.2998 651.0674 172.7559 664.6738 178.1743 671.1611 c183.7246 677.8081 197.1982 698.2886 196.9185 707.2485 CBb0 0 0 0 Bh1 (Unnamed gradient 6) -143.2578 553.1704 109.2905 34.7055 1.21341 0.103488 -0.103488 1.21341 -521.043 -2664.3677 Bg-10.5221 40.9343 40.9343 10.5221 141.8633 682.521 Bmf0 BB*U0 D0.396078 0.435294 0.094118 0 0.658824 0.588235 0.721569 Xa64.1138 662.8735 m70.498 671.7134 75.2959 679.5605 79.7847 688.186 c83.5449 695.4087 85.9624 711.6719 86.2061 721.8838 C85.1973 713.627 84.21 705.0996 82.8428 700.5615 c80.0498 691.292 68.999 673.2163 64.062 668.1323 c59.2358 663.1641 52.8311 650.7041 52.6899 646.3916 C56.1177 639.5322 L57.7305 654.0342 64.1138 662.8735 vf62.9058 600.2944 m61.3604 604.1792 61.5044 614.6763 Y57.7495 609.0908 57.7324 603.1079 V61.4805 596.7861 L65.7817 592.7041 69.1328 591.2563 V68.4072 592.0713 64.312 596.7583 62.9058 600.2944 cBb1 (Unnamed gradient 83) 92.0186 607.7949 58.5704 7.88942 0.996383 0.084979 -0.084978 0.996383 683.1768 -634.6831 Bg4.67112 6.35794 19.3522 -14.2179 50.1733 602.6299 Xm4712.1895 6413.8408 19.3522 -14.2179 -4662.0161 -5811.2109 Bc4.67112 6.35794 19.3522 -14.2179 50.1733 602.6299 Bm4712.1895 6413.8408 19.3522 -14.2179 54.8442 608.9878 Bcf0 BBULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 9 255 102 0 0 50 Lb(Swallow_2) Ln0 Au0 O0.858823 0.85098 0.788235 1 0 0 0 Xa0 J 0 j 1 w 4 M []0 d0 XR418.3135 654.4849 m411.0723 680.0693 412.334 696.356 v413.5938 712.6436 413.4404 746.3784 415.1748 756.8496 c416.9082 767.3193 425.7324 781.6387 429.8008 784.5522 c433.8701 787.4639 445.2715 787.0117 y436.8828 797.0068 437.3408 804.103 v437.7988 811.1987 434.6494 818.1758 430.1094 821.0786 c427.1973 825.1475 l437.668 823.4141 441.1582 822.8359 v444.6494 822.2578 457.209 824.4824 464.4268 820.4185 c471.6426 816.356 477.2744 808.4907 y482.9131 828.1167 488.1416 833.707 v493.3711 839.2964 530.2402 845.3857 551.7646 841.1064 c573.29 836.8262 652.0771 805.8545 680.1162 801.9302 c668.4854 800.9863 664.2969 801.6802 v660.1084 802.3735 646.2627 805.3823 y651.9658 800.853 l640.3301 804.2124 623.9287 804.7764 v607.5244 805.3389 592.1729 803.5776 581.4697 803.9141 c570.7676 804.251 565.7656 804.3623 y570.3047 801.459 l559.6025 801.7969 l561.3496 799.356 l552.6279 796.4956 547.8604 795.8501 v543.0908 795.2061 534.374 788.042 530.0146 785.5361 c525.6553 783.0298 522.5156 781.3979 y538.4688 767.2817 541.9648 762.4004 v545.46 757.5176 562.9766 748.522 566.0605 747.6538 c569.1445 746.7842 638.0439 716.7334 658.1797 706.2285 c678.3154 695.7227 698.8076 678.7021 y666.2695 700.9429 657.3691 703.4917 v648.4668 706.042 616.582 714.9053 606.3994 718.3848 c596.2188 721.8613 571.4922 728.4658 568.4121 725.0303 c565.334 721.5957 586.4824 689.0474 590.7363 682.2461 c594.9912 675.4453 612.5869 647.4307 615.7324 642.6074 c618.8789 637.7842 627.5664 618.7725 634.0303 612.3252 c625.1201 621.3291 619.7627 627.9546 v614.4043 634.5791 604.9619 651.2036 598.0938 657.3613 c591.2236 663.519 561.7969 711.0649 556.9629 716.5254 c552.1309 721.9878 528.9063 737.667 522.2715 740.917 c515.6367 744.1665 492.0752 749.1421 481.3096 753.4331 c477.7139 744.7046 473.0049 742.2573 v468.2969 739.8086 457.7139 736.5405 454.459 734.209 c454.3965 738.165 l451.6094 734.3228 449.0537 731.876 v446.4971 729.4307 440.4004 720.7583 436.8555 716.6826 c433.3125 712.6069 428.7246 706.5527 y429.6475 714.291 l425.1152 708.5845 424.7725 704.3389 v424.4277 700.0933 424.7285 691.0771 422.9902 684.9097 c421.252 678.7437 418.9346 671.2363 419.2295 666.5264 c419.5264 661.8149 420.4102 651.9863 y418.3135 654.4849 lfu458.1592 754.396 m454.7891 751.3677 440.6006 750.1313 436.1211 749.0791 c431.6445 748.0264 429.2217 731.2144 425.623 724.6387 c422.0234 718.0615 418.7363 691.7109 418.2266 679.9614 c417.7988 670.1221 419.6582 657.3979 420.2744 653.5156 C420.0156 656.4614 419.4551 662.958 419.2295 666.5264 c418.9346 671.2363 421.252 678.7437 422.9902 684.9097 c424.7285 691.0771 424.4277 700.0933 424.7725 704.3389 c425.1152 708.5845 429.6475 714.291 Y428.7246 706.5527 L433.3125 712.6069 436.8555 716.6826 v440.4004 720.7583 446.4971 729.4307 449.0537 731.876 c451.6094 734.3228 454.3965 738.165 Y454.459 734.209 L457.7139 736.5405 468.2969 739.8086 473.0049 742.2573 c475.2705 743.4351 477.2725 746.063 478.7461 748.4756 C474.1885 751.5381 464.5566 756.2065 Y461.5303 757.4248 458.1592 754.396 vBb0 0 0 0 Bh1 (Unnamed gradient 49) 119.4795 561.5776 -37.5041 33.2919 1.13659 0.188165 -0.188165 1.13659 779.3655 -2769.1729 Bg26.2043 -28.0067 -28.0067 -26.2043 460.4697 718.5098 Bmf0 BB573.6475 830.3115 m574.4688 822.2861 568.7734 818.2085 v563.0771 814.1309 534.8721 812.7041 530.3945 811.6509 c525.915 810.5991 520.4561 803.6143 517.6113 799.4233 c514.7656 795.2319 507.4443 789.9893 Y522.1104 781.1064 L522.918 781.04 L522.6602 781.272 522.5156 781.3979 Y525.6553 783.0298 530.0146 785.5361 v534.374 788.042 543.0908 795.2061 547.8604 795.8501 c552.6279 796.4956 561.3496 799.356 Y559.6025 801.7969 L570.3047 801.459 L565.7656 804.3623 L570.7676 804.251 581.4697 803.9141 v592.1729 803.5776 607.5244 805.3389 623.9287 804.7764 c640.3301 804.2124 651.9658 800.853 Y646.2627 805.3823 L660.1084 802.3735 664.2969 801.6802 v665.8809 801.418 668.5244 801.3906 671.2051 801.4575 C667.3867 803.0947 646.9561 807.4419 636.5439 809.5015 c625.4326 811.6992 573.6475 830.3115 YBb0 0 0 0 Bh1 (Unnamed gradient 49) 206.0786 637.1255 -55.008 29.9887 1.13659 0.188165 -0.188165 1.13659 779.3655 -2769.1729 Bg14.9235 -31.1592 -31.1592 -14.9235 573.1123 788.0811 Bmf0 BB590.7363 682.2461 m586.7607 688.603 568.0273 717.4512 568.1133 723.9961 C567.3975 721.8921 565.3721 715.2993 566.3926 710.6611 c567.6201 705.0801 591.5674 667.7642 595.876 663.4653 c600.1846 659.166 609.2695 649.0552 610.9023 645.918 c612.332 643.1675 619.4434 629.8438 625.0947 625.4531 C621.1328 632.4795 617.5293 639.8525 615.7324 642.6074 c612.5869 647.4307 594.9912 675.4453 590.7363 682.2461 cBb0 0 0 0 Bh1 (Unnamed gradient 49) 244.7773 544.998 43.727 19.5486 1.13659 0.188165 -0.188165 1.13659 779.3655 -2769.1729 Bg18.5987 12.6999 12.6999 -18.5987 599.7617 676.0889 Bmf0 BB597.4893 729.5415 m589.9844 731.8599 576.6631 731.5532 575.2695 729.6328 c574.4258 728.4678 572.0645 726.8984 570.3369 725.8408 C577.0928 726.958 597.4102 721.4551 606.3994 718.3848 c616.582 714.9053 648.4668 706.042 657.3691 703.4917 c657.5605 703.439 657.7803 703.3618 657.9932 703.2891 C652.5762 706.3403 646.2002 709.6436 642.4121 710.6299 c634.8486 712.5996 604.9941 727.2236 597.4893 729.5415 cBb0 0 0 0 Bh1 (Unnamed gradient 49) 250.9175 575.71 -84.6442 19.7395 1.13659 0.188165 -0.188165 1.13659 779.3655 -2769.1729 Bg-1.60391 -22.6843 -22.6843 1.60392 612.5195 709.8408 Bmf0 BBU459.7695 789.394 m469.1475 794.0557 471.4717 796.5405 v473.7959 799.0249 475.1836 804.5327 Y472.0068 802.667 462.8574 802.2695 460.373 804.5942 c457.8887 806.9175 450.2813 812.958 449.1162 814.585 c447.9521 816.2119 448.8018 818.4624 Y442.5986 818.5327 442.3662 817.1367 v442.1758 815.9805 437.1035 814.9814 435.3613 814.6704 C436.8086 811.5693 437.582 807.856 437.3408 804.103 c436.9355 797.812 443.4697 789.2573 444.96 787.3936 C447.7949 787.668 450.1533 789.0718 Y459.7695 789.394 LBb1 (Unnamed gradient 83) 459.2227 720.1221 49.8991 17.5746 0.986607 0.163271 -0.163271 0.986607 1396.1981 -1329.0935 Bg13.3637 11.4147 27.0303 -31.6456 429.749 812.5068 Xm6335.5991 5411.5977 27.0303 -31.6456 -5905.8501 -4599.0908 Bc13.3637 11.4147 27.0303 -31.6456 429.749 812.5068 Bm6335.5991 5411.5977 27.0303 -31.6456 443.1123 823.9214 Bcf0 BB0.396078 0.435294 0.094118 0 0.658824 0.588235 0.721569 Xa536.4111 839.3442 m522.1426 839.7935 497.1709 839.1455 490.3555 832.6221 c484.124 826.6641 479.207 806.9229 478.0557 799.2402 C475.7451 800.1948 473.4551 800.0122 469.1426 796.9258 c461.5498 791.4893 449.6113 788.6836 Y448.2227 783.1763 L434.0283 784.0903 431.2402 781.6836 v428.4502 779.2769 418.3086 764.2197 418.0127 750.8809 c417.9063 746.1401 417.0283 727.6133 419.8984 727.6177 c422.7686 727.6206 429.2568 752.3657 433.3652 754.0767 c437.4727 755.7891 457.5625 752.9414 459.9531 764.498 C467.248 759.4678 473.9199 756.4507 v480.5938 753.4331 510.9229 746.021 514.6465 745.4048 c518.3711 744.7886 528.6816 746.4282 530.54 748.9902 c532.3994 751.5503 521.0605 766.8159 515.1563 774.4873 c510.8057 780.1421 499.4629 787.4688 491.3115 792.1104 C493.6934 793.0283 503.6172 796.8916 507.7627 799.1401 c512.4912 801.7046 514.4932 813.8037 516.5059 817.2959 c518.5176 820.79 565.5127 821.6177 567.834 826.9712 c570.1543 832.3247 550.6807 838.895 536.4111 839.3442 cf0.207843 0.262745 0.031373 0 0.819608 0.760784 0.85098 Xa461.4023 767.4863 m454.1211 777.6572 454.873 780.042 v455.627 782.4287 463.7666 786.1021 466.4404 787.0933 c469.1143 788.0845 479.9951 784.4922 484.5352 781.5889 c489.0752 778.6855 503.166 766.312 505.3789 762.3594 c507.5938 758.4063 511.2656 752.4194 508.9404 751.3701 c506.6152 750.3198 494.6885 751.936 490.8496 752.5713 c487.0117 753.2056 469.2676 756.5024 461.4023 767.4863 cf443.8223 780.437 m434.2832 781.2998 432.6553 780.1348 v431.0283 778.9692 424.4678 767.5044 424.2383 766.1084 c424.0059 764.7124 423.5488 757.6143 425.0049 757.7334 c426.4561 757.8501 429.707 764.4854 431.5098 764.5444 c433.3135 764.6055 445.9863 769.6802 446.5068 772.8218 c447.0273 775.9629 443.8223 780.437 yf483.2832 808.6914 m487.1025 827.4238 492.3926 831.2104 v497.6787 834.9971 520.0693 838.105 521.293 836.8257 c522.5146 835.5474 513.0391 832.4551 510.6543 831.0562 c508.2715 829.6582 500.252 822.3789 499.3848 819.2944 c498.5137 816.2114 491.8359 806.1992 488.9287 805.9634 c486.0215 805.728 483.2832 808.6914 yf0.019608 0.129412 0 0 0.988235 0.909804 1 Xa460.1182 772.7197 m468.0986 762.4346 469.7256 761.4473 v471.3564 760.4604 482.8193 756.0527 485.6113 755.5903 c488.4043 755.1279 496.666 753.043 497.9443 754.2666 c499.2227 755.4893 490.4951 756.9346 487.877 758.4424 c485.2588 759.9521 475.7148 765.1172 472.9189 767.7319 c470.124 770.3462 466.6855 775.5771 464.5352 775.5752 c462.3838 775.5732 458.3105 776.9639 460.1182 772.7197 cfULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 7 128 128 128 0 50 Lb(Swallow_1) Ln0 Au0 O0.858823 0.85098 0.788235 1 0 0 0 Xa0 J 0 j 1 w 4 M []0 d0 XR428.7568 249.8262 m451.6475 253.3994 461.3145 252.2188 v470.9805 251.0371 487.0938 250.0303 498.624 250.0361 c510.1563 250.042 517.6152 251.9131 521.8535 255.1367 c526.0908 258.3623 542.2002 260.2354 546.6084 259.9004 c551.0186 259.5625 560.1768 260.416 561.874 256.5156 c563.5723 252.6162 553.2344 239.2139 548.1484 236.4971 c543.0625 233.7813 526.2832 220.2061 518.9941 214.7744 c511.7051 209.3428 481.1953 181.5156 477.2979 176.9326 c493.0615 191.6973 497.8086 192.8857 v502.5566 194.0752 517.6455 200.0195 526.1211 206.4688 c534.5957 212.918 552.5645 227.5117 557.4785 233.7891 c562.3926 240.0684 564.7617 247.8701 568.3213 250.9238 c571.8809 253.9795 590.0166 270.7773 y610.2002 265.0234 616.9824 266.7227 v623.7637 268.4229 643.0879 283.3574 y643.6855 276.6592 642.501 274.1992 v641.3145 271.7412 639.623 264.1074 640.3027 262.8369 c640.9814 261.5645 645.9873 255.9707 647.5146 254.1924 c649.042 252.4121 652.6846 258.0098 y650.4834 252.415 650.9072 250.7178 v651.332 249.0215 653.2012 244.4453 y656.333 253.5195 656.5869 255.3838 v656.8389 257.249 654.1377 239.2725 654.5625 236.1357 c654.9883 232.998 656.6016 229.4395 y658.4619 239.2744 l659.9961 223.082 661.1016 218.6719 v662.207 214.2637 665.0264 178.5684 661.0488 164.2363 c662.7461 161.7783 663.6797 159.4902 v664.6133 157.2021 666.9678 192.3896 669.4199 202.7354 c671.874 213.082 677.4443 255.5645 677.0146 270.2334 c676.5801 284.9033 682.7549 310.5977 680.123 316.7861 c677.6641 316.5313 675.2061 316.2754 v672.7461 316.0195 670.0303 319.6631 y673.2451 335.6064 671.7988 341.3721 v670.3545 347.1357 675.8594 358.248 676.3652 364.8594 c676.8682 371.4746 676.4434 376.0537 677.7139 378.1738 c678.9834 380.2939 684.0693 385.8936 y678.4736 383.7705 675.4209 383.0059 v672.3701 382.2402 662.4502 380.1143 660.584 380.3682 c658.7188 380.6221 645.4912 380.1895 641.6797 375.2686 c637.8662 370.3496 635.584 357.8838 637.3682 350.7646 c639.1523 343.6416 629.4834 349.1475 622.8652 356.8594 c616.2471 364.5723 600.1289 379.9941 586.8984 383.8867 c573.6689 387.7793 545.5166 390.8154 538.4795 391.5742 c531.4404 392.333 491.584 398.9258 478.7813 398.2402 c465.9775 397.5527 457.584 397.9727 448.3398 400.3408 c452.1582 396.6133 456.9922 396.0215 v461.8252 395.4307 476.0723 391.793 482.6025 388.7441 c489.1318 385.6963 517.4629 369.0088 523.9092 364.8555 c530.3564 360.7051 534.1758 354.0947 y542.0605 354.2695 545.5381 354.7803 v538.9248 353.8418 537.3994 352.7393 v535.874 351.6367 543.168 346.9766 545.8828 344.7734 c548.5967 342.5713 555.3008 334.5205 557.0811 331.7227 c558.8643 328.9258 560.3926 327.1465 562.002 327.9102 c563.6133 328.6738 571.4131 329.1885 572.0078 328.2559 c572.6016 327.3242 566.6689 322.2324 564.5498 322.0615 c562.4287 321.8916 564.2129 319.0918 566.7559 317.5684 c569.3018 316.043 572.6094 312.9082 575.0693 311.7227 c577.5293 310.5381 581.5146 311.8955 583.4639 311.3037 c585.4131 310.7119 582.1943 307.7422 580.8389 307.4033 c579.4814 307.0615 579.3125 304.8584 582.959 304.6895 c586.6045 304.5225 590.6748 305.542 592.2012 305.2031 c593.7266 304.8652 597.7969 305.8857 y600.0879 303.9365 l591.0215 292.6543 583.8164 288.3252 v576.6123 283.998 552.4531 272.5361 542.957 270.1572 c533.4629 267.7783 519.9814 265.4795 508.7061 264.4561 c497.4277 263.4316 478.0156 257.4844 467.417 256.6318 c456.8184 255.7773 437.0635 252.6289 428.7568 249.8262 cf/BBAccumRotation (0.245557) XT675.5947 376.5615 m673.8135 377.918 672.373 376.4746 v670.9326 375.0313 667.9639 373.9277 663.5547 375.7051 c659.1455 377.4844 655.7559 372.3105 652.4502 369.6797 c649.1445 367.0488 647.9658 351.6162 647.46 349.3281 c646.9512 347.0381 640.4229 348.6445 Y644.4971 341.0166 L646.7021 339.4072 648.5674 339.1523 v650.4326 338.9004 654.9277 336.7822 657.7266 337.124 c660.5254 337.4639 664.2559 338.3984 667.2207 340.9463 c669.3398 342.7646 671.0664 341.7275 671.8818 340.9863 C671.8555 341.1172 671.8291 341.249 671.7988 341.3721 c670.5371 346.4092 674.5791 355.5264 675.958 362.1611 C675.9531 362.1836 675.9473 362.209 675.9434 362.2324 c674.668 367.3184 675.5947 376.5615 YBb1 (Unnamed gradient 83) 669.0078 342.877 139.1849 20.3243 0.969975 -0.243133 0.243133 0.969975 -1769.6465 2315.5588 Bg-18.15 9.14568 22.7656 45.1793 660.5273 330.2012 Xm-7628.4048 3843.9182 22.7656 45.1793 8288.9316 -3513.7168 Bc-18.15 9.14568 22.7656 45.1793 660.5273 330.2012 Bm-7628.4048 3843.9182 22.7656 45.1793 642.377 339.3467 Bcf0 BB/BBAccumRotation (0.245557) XTu0.396078 0.435294 0.094118 0 0.658824 0.588235 0.721569 Xa678.0625 313.5059 m675.2383 313.2783 667.0967 313.1611 Y671.084 331.9346 669.21 341.5879 V660.7666 339.6377 643.6943 348.2412 641.8652 348.6445 c640.2666 349.001 638.2686 348.6621 637.4775 348.4961 C636.502 345.2324 628.5586 350.2246 622.8652 356.8594 c618.2871 362.1953 609.1602 371.2168 599.5889 377.5625 C586.9736 382.7119 562.0938 384.6797 561.0127 379.8018 c559.8848 374.7129 582.1641 362.5166 588.3828 358.7891 c594.6025 355.0615 588.1758 327.0215 591.3447 322.0479 c594.5127 317.0762 613.2803 318.8955 Y608.7637 308.1533 606.1641 305.1006 v603.5645 302.0449 595.7686 294.8047 590.3467 289.6025 c584.9229 284.3984 565.6035 261.7773 568.0908 259.5156 c569.916 257.8584 577.0742 260.6387 580.7705 262.2412 C585.6426 266.7266 590.0166 270.7773 Y610.2002 265.0234 616.9824 266.7227 v623.7637 268.4229 643.0879 283.3574 Y643.0938 283.2969 643.1006 283.209 V645.3965 284.9268 653.6553 292.0127 Y658.1875 273.9248 666.9961 290.5518 667.5664 284.4463 c668.1348 278.3428 670.0674 259.125 673.3438 263.3086 c676.6211 267.4912 679.8779 304.3506 Y680.1826 306.5938 L680.0869 309.9199 679.6348 313.6338 678.0625 313.5059 cf/BBAccumRotation (0.245557) XT0.207843 0.262745 0.031373 0 0.819608 0.760784 0.85098 Xa612.5166 268.2461 m599.625 273.666 600.6406 275.3633 v601.6572 277.0586 622.4453 301.4893 628.998 311.7813 c635.5498 322.0732 642.21 335.7568 644.4717 336.3242 c646.7334 336.8916 665.1631 332.3779 666.4092 329.3262 c667.6553 326.2773 669.2471 310.3369 651.7334 292.0117 c634.2197 273.6846 612.5166 268.2461 yf/BBAccumRotation (0.245557) XT621.4111 330.5459 m609.7734 323.3047 607.1689 326.0166 v604.5684 328.7266 599.8047 355.4053 596.75 358.0029 c593.6963 360.6016 580.2383 370.2031 581.1406 372.3506 c582.043 374.5 597.8701 376.5449 599.5674 375.5283 c601.2637 374.5107 616.4209 361.9727 621.5117 355.0781 c626.6025 348.1846 634.7451 344.46 y625.4805 333.4873 621.4111 330.5459 vf/BBAccumRotation (0.245557) XT668.002 310.5049 m664.1055 304.4834 664.3604 302.0244 v664.6162 299.5654 669.709 292.1914 670.2178 290.1572 c670.7275 288.1221 674.042 276.3389 y676.4033 297.1123 677.333 302.0313 v678.2627 306.9492 676.5654 310.8506 y668.002 310.5049 lf/BBAccumRotation (0.245557) XT0.019608 0.129412 0 0 0.988235 0.909804 1 Xa646.5605 291.0752 m655.791 299.6924 659.8115 306.4326 v663.832 313.1719 665.1025 325.7148 664.7695 327.7148 c664.4336 329.7178 662.4707 330.0176 660.7705 329.3447 c659.0723 328.6738 655.1113 314.4824 652.4863 309.1396 c651.3984 306.9287 647.2412 296.1406 643.9307 292.9404 c640.6182 289.7373 624.9482 275.207 y638.7178 284.5498 646.5605 291.0752 vf/BBAccumRotation (0.265659) XTU/BBAccumRotation (0.245557) XT600.6758 311.6543 m600.6758 311.6543 596.4365 311.3105 v592.1992 310.9697 586.9365 317.5811 583.374 323.1748 c579.8076 328.7695 579.4609 344.5391 577.251 350.4736 c575.0439 356.4082 558.248 368.7783 555.0244 373.0146 c551.7988 377.2529 547.5557 382.6758 540.0938 383.6904 c532.6318 384.7041 500.748 391.1289 489.5537 392.6484 c478.3584 394.1689 469.2031 393.3154 Y469.2197 393.2891 L474.1846 391.9268 479.3486 390.2627 482.6025 388.7441 c489.1318 385.6963 517.4629 369.0088 523.9092 364.8555 c530.3564 360.7051 534.1758 354.0947 Y542.0605 354.2695 545.5381 354.7803 V538.9248 353.8418 537.3994 352.7393 v535.874 351.6367 543.168 346.9766 545.8828 344.7734 c548.5967 342.5713 555.3008 334.5205 557.0811 331.7227 c558.8643 328.9258 560.3926 327.1465 562.002 327.9102 c563.6133 328.6738 571.4131 329.1885 572.0078 328.2559 c572.6016 327.3242 566.6689 322.2324 564.5498 322.0615 c562.4287 321.8916 564.2129 319.0918 566.7559 317.5684 c569.3018 316.043 572.6094 312.9082 575.0693 311.7227 c577.5293 310.5381 581.5146 311.8955 583.4639 311.3037 c585.4131 310.7119 582.1943 307.7422 580.8389 307.4033 c579.4814 307.0615 579.3125 304.8584 582.959 304.6895 c586.6045 304.5225 590.6748 305.542 592.2012 305.2031 c593.7266 304.8652 597.7969 305.8857 Y600.0879 303.9365 L599.6885 303.4434 599.0186 302.6484 V601.9189 304.0146 600.6758 311.6543 YBb0 0 0 0 Bh1 (Unnamed gradient 49) 170.2871 187.8438 -143.2462 40.3739 1.10422 -0.276782 0.276782 1.10422 -2825.8096 1189.4827 Bg-29.0327 -35.63 -35.63 29.0327 534.3525 336.6025 Bmf0 BB/BBAccumRotation (0.245557) XT669.1797 230.0674 m670.415 244.3125 670.749 254.4863 668.9375 257.8779 c667.126 261.2695 664.4082 270.1982 662.8242 272.6855 c661.2383 275.1719 657.0566 276.5254 654.2285 278.2207 c651.4014 279.9131 646.4277 278.668 643.8281 277.5352 c643.625 277.4473 643.3877 277.3135 643.1377 277.1572 C643.0361 275.9932 642.8447 274.915 642.501 274.1992 c641.3145 271.7412 639.623 264.1074 640.3027 262.8369 c640.9814 261.5645 645.9873 255.9707 647.5146 254.1924 c649.042 252.4121 652.6846 258.0098 Y650.4834 252.415 650.9072 250.7178 v651.332 249.0215 653.2012 244.4453 Y656.1396 252.96 656.5479 255.1768 v656.6016 255.5273 656.6182 255.626 656.5869 255.3838 c656.5791 255.3281 656.5615 255.2441 656.5479 255.1768 c656.1895 252.8242 654.1914 238.8643 654.5625 236.1357 c654.9883 232.998 656.6016 229.4395 Y658.4619 239.2744 L659.9961 223.082 661.1016 218.6719 v661.7871 215.9375 663.1299 201.1641 663.1035 186.9189 C663.2119 186.7646 L667.9443 215.8223 669.1797 230.0674 vBb0 0 0 0 Bh1 (Unnamed gradient 49) 244.8071 80.5605 -153.7495 33.3284 1.10422 -0.276782 0.276782 1.10422 -2825.8096 1189.4827 Bg-28.9263 -24.5507 -24.5507 28.9263 646.333 238.7646 Bmf0 BB/BBAccumRotation (0.245557) XT521.8535 255.1367 m526.0908 258.3623 542.2002 260.2354 546.6084 259.9004 c550.9414 259.5693 559.8379 260.375 561.7607 256.707 C563.127 261.8525 565.5986 271.3867 Y543.2168 264.8154 537.3389 263.3418 v531.4619 261.8682 518.6855 261.0703 512.0156 260.8408 c505.3467 260.6094 500.9385 259.0254 491.3301 257.0967 c483.9473 255.6162 472.3701 252.8008 467.3965 251.5742 C476.8945 250.6924 489.2666 250.0303 498.624 250.0361 c510.1563 250.042 517.6152 251.9131 521.8535 255.1367 cBb0 0 0 0 Bh1 (Unnamed gradient 49) 147.3545 121.1025 -104.9948 23.7396 1.10422 -0.276782 0.276782 1.10422 -2825.8096 1189.4827 Bg-0.43535 -27.0212 -27.0212 0.43535 527.5029 256.5586 Bmf0 BB/BBAccumRotation (0.245557) XT535.4424 219.1367 m540.415 222.3057 556.2324 237.8027 557.249 239.498 c557.9482 240.666 559.0742 245.5801 560.1113 250.04 C557.1514 244.7412 551.5068 238.2891 548.1484 236.4971 c543.0625 233.7813 526.2832 220.2061 518.9941 214.7744 c515.293 212.0176 505.6113 203.4902 496.4629 195.1592 C500.5078 196.7305 509.4883 200.6025 513.4063 203.5234 c518.2656 207.1436 530.4707 215.9678 535.4424 219.1367 cBb0 0 0 0 Bh1 (Unnamed gradient 49) 153.9028 98.1709 127.1825 14.9044 1.10422 -0.276782 0.276782 1.10422 -2825.8096 1189.4827 Bg-13.233 10.619 10.619 13.233 541.0811 233.0498 Bmf0 BB/BBAccumRotation (0.245557) XTU/BBAccumRotation (0.245557) XTLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF